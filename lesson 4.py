# 1. Реализовать скрипт, в котором должна быть предусмотрена функция расчёта заработной платы сотрудника.
# Используйте в нём формулу: (выработка в часах*ставка в час) + премия.
# Во время выполнения расчёта для конкретных значений необходимо запускать скрипт с параметрами.

from sys import argv
def salary_total():
        time, salary, bonus = argv
try:
        time = float(input("Inpute time: "))
        salary = float(input("Inpute salary: "))
        bonus = float(input("Inpute bonus: "))
        res = time * salary + bonus
        print(f'заработная плата сотрудника: {res}')
except ValueError:
    print('Введите корректные данные')


# #Решение 2

from sys import argv

def salary():
    time, rate, bonus = argv
try:
    time, rate, bonus = map(float,argv[1:])
    print(f'Salary - {time * salary + bonus}')
except ValueError:
    print('Введите корректиные данные')

salary()

#2. Представлен список чисел. Необходимо вывести элементы исходного списка, значения которых больше предыдущего элемента.
#Подсказка: элементы, удовлетворяющие условию, оформить в виде списка. Для его формирования используйте генератор.
# Пример исходного списка: [300, 2, 12, 44, 1, 1, 4, 10, 7, 1, 78, 123, 55].
# Результат: [12, 44, 4, 10, 78, 123].

list_number = [300, 2, 12, 44, 1, 1, 4, 10, 7, 1, 78, 123, 55]
new_list = [list_number[i] for i in range(1, len(list_number)) if list_number[i] > list_number[i-1]]
print("Исходный список: " + str(list_number))
print("Результат: " + str(new_list))


# 3. Для чисел в пределах от 20 до 240 найти числа, кратные 20 или 21. Решите задание в одну строку.
# Подсказка: используйте функцию range() и генератор.

print ([el for el in range(20, 241) if el % 20 == 0 or el % 21 == 0])


#4.Представлен список чисел. Определите элементы списка, не имеющие повторений. Сформируйте итоговый массив чисел, соответствующих требованию.
# Элементы выведите в порядке их следования в исходном списке. Для выполнения задания обязательно используйте генератор.
# Пример исходного списка: [2, 2, 2, 7, 23, 1, 44, 44, 3, 2, 10, 7, 4, 11].
# Результат: [23, 1, 3, 10, 4, 11]

list = [2, 2, 2, 7, 23, 1, 44, 44, 3, 2, 10, 7, 4, 11]
result = [el for el in list if list.count(el) == 1]
print(result)

# 5. Реализовать формирование списка, используя функцию range() и возможности генератора. В список должны войти чётные числа от 100 до 1000 (включая границы).
# Нужно получить результат вычисления произведения всех элементов списка.
# Подсказка: использовать функцию reduce().

from functools import reduce

print (reduce(lambda a, b: a * b, [el for el in range(100,1001, 2)]))

# Решение 2
from functools import reduce

def my_func(prev_el, el):
    return prev_el * el

print(f'Результат: {reduce(my_func, [el for el in range(99, 1001) if el % 2 == 0])}')

# 6. Реализовать два небольших скрипта:
# итератор, генерирующий целые числа, начиная с указанного;
# итератор, повторяющий элементы некоторого списка, определённого заранее.
# Подсказка: используйте функцию count() и cycle() модуля itertools.
# Обратите внимание, что создаваемый цикл не должен быть бесконечным. Предусмотрите условие его завершения.
# Например, в первом задании выводим целые числа, начиная с 3. При достижении числа 10 — завершаем цикл.
# Вторым пунктом необходимо предусмотреть условие, при котором повторение элементов списка прекратится.

from itertools import cycle, count

start_number = int(input('Введите начальное число: '))

for el in count(start_number):
    if el < 11:
        print(el)
    else:
        break

my_list = input('Введите элементы списка:  ').split()
for el in cycle(my_list):
    print (el, end = '')
    quit = input()
    if quit == 'q':
        break

# 7. Реализовать генератор с помощью функции с ключевым словом yield, создающим очередное значение.
# При вызове функции должен создаваться объект-генератор. Функция вызывается следующим образом: for el in fact(n).
# Она отвечает за получение факториала числа. В цикле нужно выводить только первые n чисел, начиная с 1! и до n!.
# Подсказка: факториал числа n — произведение чисел от 1 до n. Например, факториал четырёх 4! = 1 * 2 * 3 * 4 = 24.

from itertools import count
from math import factorial

def fact_gen():
    for el in count(1):
        yield factorial(el)

gen = fact_gen()
x = 0
for i in gen:
    if x < 15:
        print(i)
        x += 1
    else:
        break